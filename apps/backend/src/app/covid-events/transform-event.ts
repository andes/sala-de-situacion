import * as moment from 'moment';

export const transformEvento = (evento) => {
    const transformDate = (fecha: string) => {
        if (fecha && moment(fecha, 'DD/MM/YYYY', true).isValid()) {
            const [day, month, year] = fecha.split("/");
            return new Date(parseInt(year), parseInt(month) - 1, parseInt(day))
        }
        return null;
    }
    
    const caso = {
        ideventocaso: evento.idEventoCaso,
        evento: evento.evento,
        ambito_CONCURRENCIA: evento.ambitoConcurrencia,
        nombre: evento.nombre,
        apellido: evento.apellido,
        tipo_DOC: evento.tipoDoc,
        nro_DOC: evento.nroDoc,
        sexo: evento.sexo,
        edad_ACTUAL: evento.edad,
        edad_DIAGNOSTICO: evento.edad,
        embarazada: evento.embarazada,
        idpaisresidencia: evento.idpaisresidencia,
        pais_RESIDENCIA: evento.paisResidencia,
        provincia_RESIDENCIA: evento.provinciaResidencia,
        se_DECLARA_PUEBLO_INDIGENA: evento.seDeclaraPuebloIndigena,
        departamento_RESIDENCIA: evento.departamentoResidencia,
        localidad_RESIDENCIA: evento.localidadResidencia,
        provincia_CARGA: evento.provinciaCarga,
        localidad_CARGA: evento.localidadCarga,
        localidad_METRICAS: evento.localidadMetricas,
        establecimiento_CARGA: evento.establecimientoCarga,
        etnia: evento.etnia,
        signo_SINTOMA: evento.signoSintoma,
        fis: evento.fis,
        pais_VIAJE_FECHA: evento.paisViajeFecha,
        ppl: evento.ppl,
        muestra_FTM: evento.muestraFtm,
        determinacion_RESULTADO: evento.determinacionResultado,
        dialisis_AGUDA: evento.dialisisAguda,
        dialisis_CRONICA: evento.dialisisCronica,
        antecedente_EPIDEMIOLOGICO: evento.antecedenteEpidemiologico,
        min_FTM: transformDate(evento.minFtm),
        observaciones: evento.observaciones,
        clasificacion_MANUAL: evento.clasificacionManual,
        codigo_CIUDADANO: evento.codigoCiudadano,
        servicio_PENITENCIARIO: evento.servicioPenitenciario,
        fecha_APERTURA: transformDate(evento.fechaApertura),
        sepi_APERTURA: evento.sepiApertura,
        sepi_CONSULTA: evento.sepiConsulta,
        sepi_SINTOMA: evento.sepiSintoma,
        internado: evento.internado,
        curado: evento.curado,
        fecha_INTERNACION: transformDate(evento.fechaInternado),
        cuidado_INTENSIVO: evento.cuidadoIntenm,
        fecha_CUI_INTENSIVOS: transformDate(evento.fechaCuiIntensivos),
        fecha_DIAGNOSTICO: transformDate(evento.fechaDiagnostico),
        fecha_ALTA_MEDICA: transformDate(evento.fechaAltaPromedio),
        fallecido: evento.fallecido,
        fecha_FALLECIMIENTO: transformDate(evento.fechaFallecido),
        asist_RESP_MECANICA: evento.asistRespMecanica,
        causa_FALLECIMIENTO_VINCULADA: evento.causaFallecimientoVinculada,
        causa_FALLECIMIENTO: evento.causaFallecimiento,
        id_PROVINCIA_RESIDENCIA: evento.idProvinciaResidencia,
        id_PROVINCIA_CARGA: evento.idProvinciaCarga,
        id_SNVS_GRUPO_EVENTO: evento.idSnvsGrupoEvento,
        user_MOD_EVENTO: evento.userModEvento,
        fecha_MOD_EVENTO: transformDate(evento.fechaModEvento),
        fecha_NACIMIENTO: transformDate(evento.fechaNacimiento),
        user_MOD_DIAG: evento.userModDiag,
        fecha_MOD_DIAG: transformDate(evento.fechaModDiag),
        origen_FINANCIAMIENTO: evento.origenFinanciamiento,
        estab_DIAGNOSTICO: evento.estabDiagnostico,
        clasificacion: evento.clasificacion,
        fecha_MOD_CLASIF: new Date(evento.fechaModClasif),
        valor_ANTERIOR: evento.valorAnterior,
        valor_NUEVO: evento.valorNuevo,
        validacion: evento.validacion,
        clasif_RESUMEN: evento.clasifResumen,
        grupo_ETARIO: evento.grupoEtario,
        clasif_EPIDEMIO: evento.clasifEpidemio,
        ultimo_ESTAB_DIAG: evento.ultimoEstabDiag,
        codigo_REFES_ESTAB_CARGA: evento.codigoRefesEstabCarga,
        ocupacion: evento.ocupacion,
        operativo_DETECCION: evento.operativoDeteccion,
        calle_DOMICILIO: evento.calleDomicilio,
        numero_DOMICILIO: evento.numeroDomicilio,
        fecha_GRAFICO: new Date(evento.fechaGrafico),
        grupo_ETARIO_DECADA: evento.grupoEtarioDecada,
        cobertura_SOCIAL: evento.coberturaSocial,
        malbran: evento.malbran,
        id_DEPTO_INDEC_RESIDENCIA: evento.idDeptoIndecResidencia,
        id_DEPTO_INDEC_CARGA: evento.idDeptoIndecCarga,
        asma: evento.asma,
        bajo_PESO: evento.bajoPeso,
        bronquio_PREVIA: evento.bronquioPrevia,
        dbt: evento.dbt,
        embarazo: evento.embarazo,
        enf_NEURO_PREVIA: evento.enfNeuroPrevia,
        enf_ONCO_PREVIA: evento.enfOncoPrevia,
        epoc: evento.epoc,
        hepato_CRONICA: evento.epatoCronica,
        hta: evento.hta,
        id_DEPARTAMENTO_CARGA: evento.idDepartamentoCarga,
        id_DEPARTAMENTO_RESIDENCIA: evento.idDepartamentoResidencia,
        inmunos_CONGENITA: evento.inmunosCongenita,
        insf_CARDIACA: evento.insfCardiaca,
        insf_RENAL: evento.insfRenal,
        nac_PREVIA: evento.nacPrevia,
        nacionalidad: evento.nacionalidad,
        obesidad: evento.obesidad,
        prematuro: evento.prematuro,
        sin_COMORB: evento.sinComorb,
        tbc: evento.tbc,
        ex_FUMADOR: evento.exFumador,
        fumador: evento.fumador,
        barrio_POPULAR: evento.barrioPopular,
        tratamiento_FECHA_RESULTADO: transformDate(evento.tratamientoFechaResultado),
        id_PROVINCIA_INDEC: evento.idProvinciaIndec,
        id_PROVINCIA_METRICAS: evento.idProvinciaMetricas,
        estab_DIAG_NO_MALBRAN: evento.estabDiagNoMalbran,
        grupo_ETARIO_MORTALIDAD: evento.grupoEtarioMortalidad,
        estab_INTERNACION: evento.estabInternacion,
        codigo_REFES_ESTAB_INTERNACION: evento.codigoRefesEstabInternacion,
        info_CONTACTO: evento.infoContacto,
        vigilancia_ACTIVA: evento.vigilanciaActiva
    }    
    return caso;
}